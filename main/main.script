local sonar = require("main.sonar")

local PLAYBACK_ONCE_FORWARD = go.PLAYBACK_ONCE_FORWARD
local EASING_LINEAR = go.EASING_LINEAR
local EASING_OUTSINE = go.EASING_OUTSINE
local start_timer = timer.delay
local cancel_timer = timer.cancel

local VECTOR_UP = vmath.vector3(0, 1, 0)
local QUAT_UPSIDE_DOWN = vmath.quat_rotation_z(math.rad(180))
---@param normal vector3
---@return quat
local function get_rotation(normal)
	if normal.y == -1 then
		return QUAT_UPSIDE_DOWN
	else
		return vmath.quat_from_to(VECTOR_UP, normal)
	end
end

---@class RaycastResponse
---@field fraction number
---@field position vector3
---@field normal vector3
---@field id hash
---@field group hash
---@field request_id number

---@param hits RaycastResponse[]
---@return { [hash]: RaycastResponse }, number
local function cpg(hits)
	local count = 0
	local filtered_hits = {}
	for _, hit in ipairs(hits) do
		local group = hit.group
		if not filtered_hits[group] then
			filtered_hits[group] = hit
			count = count + 1
		end
	end

	return filtered_hits, count
end

---@param id hash
---@return fun(self: Self, id: hash, emitter: hash, event: number)
local function delete_particle(id)
	return function(_, _, _, event)
		if event == particlefx.EMITTER_STATE_SPAWNING then
			go.delete(id)
		end
	end
end

local PROP_TINT = hash("tint")

---@param normal vector3
---@param position vector3
---@param color vector4
local function spawn_splash2(normal, position, color)
	local splash = factory.create("#splash", position, get_rotation(normal))
	local particle = msg.url(nil, splash, "particle")

	particlefx.play(particle, delete_particle(splash))
	particlefx.set_constant(particle, "emitter", "tint", color)
end

local PROP_ALPHA = hash("tint.w")
local PROJECTILE_SPEED = 150
local DOT_RAY = vmath.vector3(0, 500, 0)
local MAX_TRAVEL_TIME = DOT_RAY.y / PROJECTILE_SPEED

---@param url url
---@param color vector4
local function set_color(url, color)
	go.set(url, PROP_TINT, color)
end

---@param url url
---@return vector4
local function get_color(url)
	return go.get(url, PROP_TINT)
end

local function remove_color(url, color)
	local current = get_color(url)
	current.x = current.x - color.x / 2
	current.y = current.y - color.y / 2
	current.z = current.z - color.z / 2

	set_color(url, current)
end

---@param a vector4
---@param b vector4
---@param n number
---@return vector4
local function subtract_color(a, b, n)
	local color = vmath.vector4(a)
	color.x = a.x - b.x / n
	color.y = a.y - b.y / n
	color.z = a.z - b.z / n
	return color
end

local function fade_out(url, duration)
	go.animate(url, PROP_ALPHA, PLAYBACK_ONCE_FORWARD, 0, EASING_OUTSINE, duration)
end

local BLUE_GROUP = hash("blue")
local GREEN_GROUP = hash("green")
local GROUPS = { BLUE_GROUP, GREEN_GROUP }
local RAY_ALL = { all = true }
--local BLUE_COLOR = vmath.vector4(0.00, 0.20, 0.80, 1)
--local GREEN_COLOR = vmath.vector4(0.12, 0.90, 0.50, 1)
local GREEN_COLOR = vmath.vector4(0, 1, 0, 1)
local BLUE_COLOR = vmath.vector4(0, 0, 1, 1)
local BLUEGREEN_COLOR = BLUE_COLOR / 2 + GREEN_COLOR / 2
local EMPTY_COLOR = vmath.vector4(0.05, 0.05, 0.05, 1)

---@type { [hash]: vector4 }
local COLOR_MAP = {
	[BLUE_GROUP] = BLUE_COLOR,
	[GREEN_GROUP] = GREEN_COLOR
}

local COLORS = 2

---@type { [number]: quat }
local QUAT_CACHE = {}

---@param degrees number
---@return quat
local function deg_to_quat(degrees)
	return QUAT_CACHE[degrees] or vmath.quat_rotation_z(math.rad(degrees))
end

local EMITTER_IDS = { "emitter", "emitter1", "emitter2", "emitter3" }
---@param particle_url url
---@param color vector4
local function set_batch_color(particle_url, color)
	for _, emitter in ipairs(EMITTER_IDS) do
		particlefx.set_constant(particle_url, emitter, "tint", color)
	end
end

---@param position vector3
---@param degrees number
---@param color vector4
---@param delete_immediately bool
---@return url
local function spawn_dot_batch(position, degrees, color, delete_immediately)
	local main = factory.create("#factory1", position)
	local particle = msg.url(nil, main, "particle")

	go.set_rotation(deg_to_quat(degrees), main)
	particlefx.play(particle, delete_immediately and delete_particle(main) or nil)
	set_batch_color(particle, color)

	return particle
end

---@type { [number]: vector3}
local OFFSETS = {}
for angle = 1, 256 do
	local degrees = 1 + ((360 - 1) / (256 - 1)) * (angle - 1)
	local radians = math.rad(degrees + 90)
	OFFSETS[angle] = vmath.rotate(vmath.quat_rotation_z(radians), DOT_RAY)
end

---@param self Self
local function pulse_sonar(self)
	local color_count = #self.groups
	if color_count == 0 then return end

	self.sonar_ready = false

	local initial_color = vmath.vector4()
	for _, group in ipairs(self.groups) do
		initial_color = initial_color + COLOR_MAP[group] / color_count
	end

	---@type vector4[]
	local seconds_left = {}
	for angle = 1, 256 do
		local ray = physics.raycast(self.pos, self.pos + OFFSETS[angle], self.groups, RAY_ALL)
		local seconds = vmath.vector4(4)
		if ray then
			local current_color = self.color
			local hits, num_hits = cpg(ray)

			for group, ray in pairs(hits) do
				local time_til_hit = MAX_TRAVEL_TIME * ray.fraction
				timer.delay(time_til_hit, false, function()
					spawn_splash2(ray.normal, ray.position, COLOR_MAP[group])
				end)
				if group == GREEN_GROUP then
					seconds.y = time_til_hit
				elseif group == BLUE_GROUP then
					seconds.z = time_til_hit
				end
			end
		end

		seconds_left[angle] = seconds
	end
	sonar.new_sonar(self.pos, self.color, seconds_left)

	timer.delay(MAX_TRAVEL_TIME, false, function()
		self.sonar_ready = true
	end)
end

---@param self Self
---@param x number
local function move_x(self, x)
	local new_pos = self.pos + vmath.vector3(x, 0, 0)

	local ray = physics.raycast(self.pos, new_pos, self.groups)
	if not ray then
		self.pos = new_pos
	else
		self.velocity.x = self.velocity.x * -0.5
	end
end

---@param self Self
---@param y number
local function move_y(self, y)
	local new_pos = self.pos + vmath.vector3(0, y, 0)

	local ray = physics.raycast(self.pos, new_pos, self.groups)
	if not ray then
		self.pos = new_pos
	else
		self.velocity.y = self.velocity.y * -0.5
	end
end

local function move(self, offset)
	if vmath.length_sqr(offset) == 0 then return end

	if math.abs(offset.x) > 0.001 then
		move_x(self, offset.x)
	end
	if math.abs(offset.y) > 0.001 then
		move_y(self, offset.y)
	end
end

---@param self Self
local function update_color(self)
	self.color = vmath.vector4()
	if #self.groups == 0 then
		self.color = EMPTY_COLOR
	else
		for _, group in ipairs(self.groups) do
			self.color = self.color + COLOR_MAP[group] / #self.groups
		end
	end
	set_color(msg.url("go2#sprite"), self.color * 1.5)
	particlefx.set_constant("go2#trail", "emitter", "tint", self.color)
end

---@class Self
---@field pos vector3
---@field input vector3
---@field velocity vector3
---@field color vector4
---@field dot_factory url
---@field groups hash[]
---@field sonar_ready bool
---@field sonar_timer hash

---@param self Self
function init(self)
	msg.post(".", "acquire_input_focus")
	particlefx.play("go2#trail")
	MAP_X, MAP_Y, MAP_W, MAP_H = tilemap.get_bounds("/map#map")
	self.pos = vmath.vector3(480, 320, 1)
	self.input = vmath.vector3()
	self.velocity = vmath.vector3()
	self.dot_factory = msg.url("#factory")
	self.groups = {}

	self.color = vmath.vector4()
	update_color(self)

	self.sonar_ready = true
	self.sonar_timer = timer.delay(1.5, true, pulse_sonar)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local ACCELERATION = 500
local function apply_input(self, dt)
	if vmath.length_sqr(self.input) > 0 then
		self.velocity = self.velocity + vmath.normalize(self.input) * ACCELERATION * dt
	end
end

local function apply_friction(self)
	self.velocity = self.velocity * 0.99
end

function update(self, dt)
	apply_input(self, dt)
	move(self, self.velocity * dt)
	go.set_position(self.pos, "go2")
	self.input.x, self.input.y = 0, 0
	sonar.update(dt)
end

function fixed_update(self, dt)
	-- Putting this here because math is hard
	apply_friction(self)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

---@param t table
---@param v any
---@return number?
local function find_in_table(t, v)
	for i, value in ipairs(t) do
		if value == v then
			return i
		end
	end
end

---@param self Self
---@param group hash
local function add_group(self, group)
	table.insert(self.groups, group)
	update_color(self)
end

---@param self Self
---@param group hash
local function toggle_group(self, group)
	local index = find_in_table(self.groups, group)
	if index then
		table.remove(self.groups, index)
		update_color(self)
	else
		add_group(self, group)
	end
end

---@param self Self
function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("space") then
		if action.pressed then
			timer.cancel(self.sonar_timer)
		elseif action.released then
			if self.sonar_ready then
				pulse_sonar(self)
			end
			self.sonar_timer = timer.delay(1.5, true, pulse_sonar)
		end
	elseif action.pressed then
		if action_id == hash("one") then
			toggle_group(self, BLUE_GROUP)
		elseif action_id == hash("two") then
			toggle_group(self, GREEN_GROUP)
		end
	end

	if action.pressed then
		if action_id == hash("p") then
			msg.post("@system:", "toggle_profile")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
