game = require("game")

local TILE_SIZE = 64

local function tile_to_world(x, y, map_pos)
	return vmath.vector3((x-1)*TILE_SIZE + TILE_SIZE/2, (y-1)*TILE_SIZE + TILE_SIZE/2, 0) + map_pos
end

local function insert_tilemap(url, group)
	local tile_aabbs = {}

	local map_pos = go.get_position(url)
	local start_x, start_y, width, height = tilemap.get_bounds(url)
	for tile_x = start_x,width do
		for tile_y = start_y,height do
			if tilemap.get_tile(url, "layer1", tile_x, tile_y) > 0 then
				local pos = tile_to_world(tile_x, tile_y, map_pos)
				local aabb_id = aabb.insert(group, pos.x, pos.y, TILE_SIZE, TILE_SIZE)
				tile_aabbs[aabb_id] = pos
			end
		end
	end

	return tile_aabbs
end

local PROJECTILE_SPEED = 200
function init(self)
	msg.post(".", "acquire_input_focus")
	self.pos = vmath.vector3(0, 0, 1)

	go.set("go2#sprite", "tint", vmath.vector4(0, 0, 1, 1))

	local groups = {hash("world")}
	timer.delay(1, true, function()
		for degrees = 1,365,0.5 do
			local offset = vmath.rotate(vmath.quat_rotation_z(math.rad(degrees)), vmath.vector3(0, 1000, 0))
			local ray = physics.raycast(self.pos, self.pos + offset, groups)

			if ray then
				local dot_id = factory.create("#factory", self.pos)
				go.animate(dot_id, "position", go.PLAYBACK_ONCE_FORWARD, ray.position, go.EASING_LINEAR, vmath.length(self.pos - ray.position)/PROJECTILE_SPEED, 0, function()
					go.animate(msg.url(nil, dot_id, "sprite"), "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_OUTSINE, 0.1, 0, function()
						go.delete(dot_id)
					end)
				end)
			end
		end
	end)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	--[[local ray = physics.raycast(self.pos, self.pos + vmath.vector3(200, 0, 0), {hash("world")})

	if ray then
		go.set_position(ray.position, "go1")
	end]]
	go.set_position(self.pos, "go2")
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

local SPEED = 5
function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.pos.y = self.pos.y + SPEED
	elseif action_id == hash("down") then
		self.pos.y = self.pos.y - SPEED
	elseif action_id == hash("left") then
		self.pos.x = self.pos.x - SPEED
	elseif action_id == hash("right") then
		self.pos.x = self.pos.x + SPEED
	end

	if action_id == hash("p") and action.pressed then
		msg.post("@system:", "toggle_profile")
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
